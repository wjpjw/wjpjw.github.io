<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jipeng&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="wjpjw.github.io/"/>
  <updated>2016-09-08T07:51:09.000Z</updated>
  <id>wjpjw.github.io/</id>
  
  <author>
    <name>Jipeng Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="wjpjw.github.io/2016/09/08/crc-framework.md/"/>
    <id>wjpjw.github.io/2016/09/08/crc-framework.md/</id>
    <published>2016-09-08T07:49:22.000Z</published>
    <updated>2016-09-08T07:51:09.000Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html>
<html>
  <head>
      <meta charset="utf-8">
      <title>crc-framework</title>
      <style>.markdown-preview:not([data-use-github-style]) { padding: 2em; font-size: 1.2em; color: rgb(56, 58, 66); overflow: auto; background-color: rgb(250, 250, 250); }
.markdown-preview:not([data-use-github-style]) > :first-child { margin-top: 0px; }
.markdown-preview:not([data-use-github-style]) h1, .markdown-preview:not([data-use-github-style]) h2, .markdown-preview:not([data-use-github-style]) h3, .markdown-preview:not([data-use-github-style]) h4, .markdown-preview:not([data-use-github-style]) h5, .markdown-preview:not([data-use-github-style]) h6 { line-height: 1.2; margin-top: 1.5em; margin-bottom: 0.5em; color: rgb(0, 0, 0); }
.markdown-preview:not([data-use-github-style]) h1 { font-size: 2.4em; font-weight: 300; }
.markdown-preview:not([data-use-github-style]) h2 { font-size: 1.8em; font-weight: 400; }
.markdown-preview:not([data-use-github-style]) h3 { font-size: 1.5em; font-weight: 500; }
.markdown-preview:not([data-use-github-style]) h4 { font-size: 1.2em; font-weight: 600; }
.markdown-preview:not([data-use-github-style]) h5 { font-size: 1.1em; font-weight: 600; }
.markdown-preview:not([data-use-github-style]) h6 { font-size: 1em; font-weight: 600; }
.markdown-preview:not([data-use-github-style]) strong { color: rgb(0, 0, 0); }
.markdown-preview:not([data-use-github-style]) del { color: rgb(94, 97, 110); }
.markdown-preview:not([data-use-github-style]) a, .markdown-preview:not([data-use-github-style]) a code { color: rgb(82, 111, 255); }
.markdown-preview:not([data-use-github-style]) img { max-width: 100%; }
.markdown-preview:not([data-use-github-style]) > p { margin-top: 0px; margin-bottom: 1.5em; }
.markdown-preview:not([data-use-github-style]) > ul, .markdown-preview:not([data-use-github-style]) > ol { margin-bottom: 1.5em; }
.markdown-preview:not([data-use-github-style]) blockquote { margin: 1.5em 0px; font-size: inherit; color: rgb(94, 97, 110); border-color: rgb(209, 209, 210); border-width: 4px; }
.markdown-preview:not([data-use-github-style]) hr { margin: 3em 0px; border-top-width: 2px; border-top-style: dashed; border-top-color: rgb(209, 209, 210); background: none; }
.markdown-preview:not([data-use-github-style]) table { margin: 1.5em 0px; }
.markdown-preview:not([data-use-github-style]) th { color: rgb(0, 0, 0); }
.markdown-preview:not([data-use-github-style]) th, .markdown-preview:not([data-use-github-style]) td { padding: 0.66em 1em; border: 1px solid rgb(209, 209, 210); }
.markdown-preview:not([data-use-github-style]) code { color: rgb(0, 0, 0); background-color: rgb(234, 234, 235); }
.markdown-preview:not([data-use-github-style]) pre.editor-colors { margin: 1.5em 0px; padding: 1em; font-size: 0.92em; border-radius: 3px; background-color: rgb(240, 240, 240); }
.markdown-preview:not([data-use-github-style]) kbd { color: rgb(0, 0, 0); border-width: 1px 1px 2px; border-style: solid; border-color: rgb(209, 209, 210) rgb(209, 209, 210) rgb(193, 193, 194); background-color: rgb(234, 234, 235); }
.markdown-preview[data-use-github-style] { font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; line-height: 1.6; word-wrap: break-word; padding: 30px; font-size: 16px; color: rgb(51, 51, 51); overflow: scroll; background-color: rgb(255, 255, 255); }
.markdown-preview[data-use-github-style] > :first-child { margin-top: 0px !important; }
.markdown-preview[data-use-github-style] > :last-child { margin-bottom: 0px !important; }
.markdown-preview[data-use-github-style] a:not([href]) { color: inherit; text-decoration: none; }
.markdown-preview[data-use-github-style] .absent { color: rgb(204, 0, 0); }
.markdown-preview[data-use-github-style] .anchor { position: absolute; top: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px; }
.markdown-preview[data-use-github-style] .anchor:focus { outline: none; }
.markdown-preview[data-use-github-style] h1, .markdown-preview[data-use-github-style] h2, .markdown-preview[data-use-github-style] h3, .markdown-preview[data-use-github-style] h4, .markdown-preview[data-use-github-style] h5, .markdown-preview[data-use-github-style] h6 { position: relative; margin-top: 1em; margin-bottom: 16px; font-weight: bold; line-height: 1.4; }
.markdown-preview[data-use-github-style] h1 .octicon-link, .markdown-preview[data-use-github-style] h2 .octicon-link, .markdown-preview[data-use-github-style] h3 .octicon-link, .markdown-preview[data-use-github-style] h4 .octicon-link, .markdown-preview[data-use-github-style] h5 .octicon-link, .markdown-preview[data-use-github-style] h6 .octicon-link { display: none; color: rgb(0, 0, 0); vertical-align: middle; }
.markdown-preview[data-use-github-style] h1:hover .anchor, .markdown-preview[data-use-github-style] h2:hover .anchor, .markdown-preview[data-use-github-style] h3:hover .anchor, .markdown-preview[data-use-github-style] h4:hover .anchor, .markdown-preview[data-use-github-style] h5:hover .anchor, .markdown-preview[data-use-github-style] h6:hover .anchor { padding-left: 8px; margin-left: -30px; text-decoration: none; }
.markdown-preview[data-use-github-style] h1:hover .anchor .octicon-link, .markdown-preview[data-use-github-style] h2:hover .anchor .octicon-link, .markdown-preview[data-use-github-style] h3:hover .anchor .octicon-link, .markdown-preview[data-use-github-style] h4:hover .anchor .octicon-link, .markdown-preview[data-use-github-style] h5:hover .anchor .octicon-link, .markdown-preview[data-use-github-style] h6:hover .anchor .octicon-link { display: inline-block; }
.markdown-preview[data-use-github-style] h1 tt, .markdown-preview[data-use-github-style] h2 tt, .markdown-preview[data-use-github-style] h3 tt, .markdown-preview[data-use-github-style] h4 tt, .markdown-preview[data-use-github-style] h5 tt, .markdown-preview[data-use-github-style] h6 tt, .markdown-preview[data-use-github-style] h1 code, .markdown-preview[data-use-github-style] h2 code, .markdown-preview[data-use-github-style] h3 code, .markdown-preview[data-use-github-style] h4 code, .markdown-preview[data-use-github-style] h5 code, .markdown-preview[data-use-github-style] h6 code { font-size: inherit; }
.markdown-preview[data-use-github-style] h1 { padding-bottom: 0.3em; font-size: 2.25em; line-height: 1.2; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); }
.markdown-preview[data-use-github-style] h1 .anchor { line-height: 1; }
.markdown-preview[data-use-github-style] h2 { padding-bottom: 0.3em; font-size: 1.75em; line-height: 1.225; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); }
.markdown-preview[data-use-github-style] h2 .anchor { line-height: 1; }
.markdown-preview[data-use-github-style] h3 { font-size: 1.5em; line-height: 1.43; }
.markdown-preview[data-use-github-style] h3 .anchor { line-height: 1.2; }
.markdown-preview[data-use-github-style] h4 { font-size: 1.25em; }
.markdown-preview[data-use-github-style] h4 .anchor { line-height: 1.2; }
.markdown-preview[data-use-github-style] h5 { font-size: 1em; }
.markdown-preview[data-use-github-style] h5 .anchor { line-height: 1.1; }
.markdown-preview[data-use-github-style] h6 { font-size: 1em; color: rgb(119, 119, 119); }
.markdown-preview[data-use-github-style] h6 .anchor { line-height: 1.1; }
.markdown-preview[data-use-github-style] p, .markdown-preview[data-use-github-style] blockquote, .markdown-preview[data-use-github-style] ul, .markdown-preview[data-use-github-style] ol, .markdown-preview[data-use-github-style] dl, .markdown-preview[data-use-github-style] table, .markdown-preview[data-use-github-style] pre { margin-top: 0px; margin-bottom: 16px; }
.markdown-preview[data-use-github-style] hr { height: 4px; padding: 0px; margin: 16px 0px; border: 0px none; background-color: rgb(231, 231, 231); }
.markdown-preview[data-use-github-style] ul, .markdown-preview[data-use-github-style] ol { padding-left: 2em; }
.markdown-preview[data-use-github-style] ul.no-list, .markdown-preview[data-use-github-style] ol.no-list { padding: 0px; list-style-type: none; }
.markdown-preview[data-use-github-style] ul ul, .markdown-preview[data-use-github-style] ul ol, .markdown-preview[data-use-github-style] ol ol, .markdown-preview[data-use-github-style] ol ul { margin-top: 0px; margin-bottom: 0px; }
.markdown-preview[data-use-github-style] li > p { margin-top: 16px; }
.markdown-preview[data-use-github-style] dl { padding: 0px; }
.markdown-preview[data-use-github-style] dl dt { padding: 0px; margin-top: 16px; font-size: 1em; font-style: italic; font-weight: bold; }
.markdown-preview[data-use-github-style] dl dd { padding: 0px 16px; margin-bottom: 16px; }
.markdown-preview[data-use-github-style] blockquote { padding: 0px 15px; color: rgb(119, 119, 119); border-left-width: 4px; border-left-style: solid; border-left-color: rgb(221, 221, 221); }
.markdown-preview[data-use-github-style] blockquote > :first-child { margin-top: 0px; }
.markdown-preview[data-use-github-style] blockquote > :last-child { margin-bottom: 0px; }
.markdown-preview[data-use-github-style] table { display: block; width: 100%; overflow: auto; word-break: keep-all; }
.markdown-preview[data-use-github-style] table th { font-weight: bold; }
.markdown-preview[data-use-github-style] table th, .markdown-preview[data-use-github-style] table td { padding: 6px 13px; border: 1px solid rgb(221, 221, 221); }
.markdown-preview[data-use-github-style] table tr { border-top-width: 1px; border-top-style: solid; border-top-color: rgb(204, 204, 204); background-color: rgb(255, 255, 255); }
.markdown-preview[data-use-github-style] table tr:nth-child(2n) { background-color: rgb(248, 248, 248); }
.markdown-preview[data-use-github-style] img { max-width: 100%; box-sizing: border-box; }
.markdown-preview[data-use-github-style] .emoji { max-width: none; }
.markdown-preview[data-use-github-style] span.frame { display: block; overflow: hidden; }
.markdown-preview[data-use-github-style] span.frame > span { display: block; float: left; width: auto; padding: 7px; margin: 13px 0px 0px; overflow: hidden; border: 1px solid rgb(221, 221, 221); }
.markdown-preview[data-use-github-style] span.frame span img { display: block; float: left; }
.markdown-preview[data-use-github-style] span.frame span span { display: block; padding: 5px 0px 0px; clear: both; color: rgb(51, 51, 51); }
.markdown-preview[data-use-github-style] span.align-center { display: block; overflow: hidden; clear: both; }
.markdown-preview[data-use-github-style] span.align-center > span { display: block; margin: 13px auto 0px; overflow: hidden; text-align: center; }
.markdown-preview[data-use-github-style] span.align-center span img { margin: 0px auto; text-align: center; }
.markdown-preview[data-use-github-style] span.align-right { display: block; overflow: hidden; clear: both; }
.markdown-preview[data-use-github-style] span.align-right > span { display: block; margin: 13px 0px 0px; overflow: hidden; text-align: right; }
.markdown-preview[data-use-github-style] span.align-right span img { margin: 0px; text-align: right; }
.markdown-preview[data-use-github-style] span.float-left { display: block; float: left; margin-right: 13px; overflow: hidden; }
.markdown-preview[data-use-github-style] span.float-left span { margin: 13px 0px 0px; }
.markdown-preview[data-use-github-style] span.float-right { display: block; float: right; margin-left: 13px; overflow: hidden; }
.markdown-preview[data-use-github-style] span.float-right > span { display: block; margin: 13px auto 0px; overflow: hidden; text-align: right; }
.markdown-preview[data-use-github-style] code, .markdown-preview[data-use-github-style] tt { padding: 0.2em 0px; margin: 0px; font-size: 85%; border-radius: 3px; background-color: rgba(0, 0, 0, 0.0392157); }
.markdown-preview[data-use-github-style] code::before, .markdown-preview[data-use-github-style] tt::before, .markdown-preview[data-use-github-style] code::after, .markdown-preview[data-use-github-style] tt::after { letter-spacing: -0.2em; content: " "; }
.markdown-preview[data-use-github-style] code br, .markdown-preview[data-use-github-style] tt br { display: none; }
.markdown-preview[data-use-github-style] del code { text-decoration: inherit; }
.markdown-preview[data-use-github-style] pre > code { padding: 0px; margin: 0px; font-size: 100%; word-break: normal; white-space: pre; border: 0px; background: transparent; }
.markdown-preview[data-use-github-style] .highlight { margin-bottom: 16px; }
.markdown-preview[data-use-github-style] .highlight pre, .markdown-preview[data-use-github-style] pre { padding: 16px; overflow: auto; font-size: 85%; line-height: 1.45; border-radius: 3px; background-color: rgb(247, 247, 247); }
.markdown-preview[data-use-github-style] .highlight pre { margin-bottom: 0px; word-break: normal; }
.markdown-preview[data-use-github-style] pre { word-wrap: normal; }
.markdown-preview[data-use-github-style] pre code, .markdown-preview[data-use-github-style] pre tt { display: inline; max-width: initial; padding: 0px; margin: 0px; overflow: initial; line-height: inherit; word-wrap: normal; border: 0px; background-color: transparent; }
.markdown-preview[data-use-github-style] pre code::before, .markdown-preview[data-use-github-style] pre tt::before, .markdown-preview[data-use-github-style] pre code::after, .markdown-preview[data-use-github-style] pre tt::after { content: normal; }
.markdown-preview[data-use-github-style] kbd { display: inline-block; padding: 3px 5px; font-size: 11px; line-height: 10px; color: rgb(85, 85, 85); vertical-align: middle; border-style: solid; border-width: 1px; border-color: rgb(204, 204, 204) rgb(204, 204, 204) rgb(187, 187, 187); border-radius: 3px; box-shadow: rgb(187, 187, 187) 0px -1px 0px inset; background-color: rgb(252, 252, 252); }
.markdown-preview[data-use-github-style] a { color: rgb(51, 122, 183); }
.markdown-preview[data-use-github-style] code { color: inherit; }
.markdown-preview[data-use-github-style] pre.editor-colors { padding: 0.8em 1em; margin-bottom: 1em; font-size: 0.85em; border-radius: 4px; overflow: auto; }
.scrollbars-visible-always .markdown-preview pre.editor-colors::shadow .vertical-scrollbar, .scrollbars-visible-always .markdown-preview pre.editor-colors::shadow .horizontal-scrollbar { visibility: hidden; }
.scrollbars-visible-always .markdown-preview pre.editor-colors:hover::shadow .vertical-scrollbar, .scrollbars-visible-always .markdown-preview pre.editor-colors:hover::shadow .horizontal-scrollbar { visibility: visible; }
.bracket-matcher .region {
  border-bottom: 1px dotted lime;
  position: absolute;
}

pre.editor-colors,
.host {
  background-color: #fafafa;
  color: #383a42;
}
pre.editor-colors .line.cursor-line,
.host .line.cursor-line {
  background-color: rgba(56, 58, 66, 0.04);
}
pre.editor-colors .invisible,
.host .invisible {
  color: #383a42;
}
pre.editor-colors .cursor,
.host .cursor {
  border-left: 2px solid #526fff;
}
pre.editor-colors .selection .region,
.host .selection .region {
  background-color: #ededed;
}
pre.editor-colors .bracket-matcher .region,
.host .bracket-matcher .region {
  border-bottom: 1px solid #526fff;
  box-sizing: border-box;
}
pre.editor-colors .invisible-character,
.host .invisible-character {
  color: rgba(56, 58, 66, 0.2);
}
pre.editor-colors .indent-guide,
.host .indent-guide {
  color: rgba(56, 58, 66, 0.2);
}
pre.editor-colors .wrap-guide,
.host .wrap-guide {
  background-color: rgba(56, 58, 66, 0.2);
}
pre.editor-colors .gutter .line-number,
.host .gutter .line-number {
  color: #9d9d9f;
  -webkit-font-smoothing: antialiased;
}
pre.editor-colors .gutter .line-number.cursor-line,
.host .gutter .line-number.cursor-line {
  color: #383a42;
  background-color: #f2f2f2;
}
pre.editor-colors .gutter .line-number.cursor-line-no-selection,
.host .gutter .line-number.cursor-line-no-selection {
  background-color: transparent;
}
pre.editor-colors .gutter .line-number .icon-right,
.host .gutter .line-number .icon-right {
  color: #383a42;
}
pre.editor-colors .gutter:not(.git-diff-icon) .line-number.git-line-removed.git-line-removed::before,
.host .gutter:not(.git-diff-icon) .line-number.git-line-removed.git-line-removed::before {
  bottom: -3px;
}
pre.editor-colors .gutter:not(.git-diff-icon) .line-number.git-line-removed::after,
.host .gutter:not(.git-diff-icon) .line-number.git-line-removed::after {
  content: "";
  position: absolute;
  left: 0px;
  bottom: 0px;
  width: 25px;
  border-bottom: 1px dotted rgba(255, 20, 20, 0.5);
  pointer-events: none;
}
pre.editor-colors .gutter .line-number.folded,
.host .gutter .line-number.folded,
pre.editor-colors .gutter .line-number:after,
.host .gutter .line-number:after,
pre.editor-colors .fold-marker:after,
.host .fold-marker:after {
  color: #383a42;
}
.comment {
  color: #a0a1a7;
  font-style: italic;
}
.comment .markup.link {
  color: #a0a1a7;
}
.entity.name.type {
  color: #c18401;
}
.entity.other.inherited-class {
  color: #50a14f;
}
.keyword {
  color: #a626a4;
}
.keyword.control {
  color: #a626a4;
}
.keyword.operator {
  color: #383a42;
}
.keyword.other.special-method {
  color: #4078f2;
}
.keyword.other.unit {
  color: #986801;
}
.storage {
  color: #a626a4;
}
.storage.type.annotation,
.storage.type.primitive {
  color: #a626a4;
}
.storage.modifier.package,
.storage.modifier.import {
  color: #383a42;
}
.constant {
  color: #986801;
}
.constant.variable {
  color: #986801;
}
.constant.character.escape {
  color: #0184bc;
}
.constant.numeric {
  color: #986801;
}
.constant.other.color {
  color: #0184bc;
}
.constant.other.symbol {
  color: #0184bc;
}
.variable {
  color: #e45649;
}
.variable.interpolation {
  color: #ca1243;
}
.variable.parameter {
  color: #383a42;
}
.string {
  color: #50a14f;
}
.string.regexp {
  color: #0184bc;
}
.string.regexp .source.ruby.embedded {
  color: #c18401;
}
.string.other.link {
  color: #e45649;
}
.punctuation.definition.comment {
  color: #a0a1a7;
}
.punctuation.definition.method-parameters,
.punctuation.definition.function-parameters,
.punctuation.definition.parameters,
.punctuation.definition.separator,
.punctuation.definition.seperator,
.punctuation.definition.array {
  color: #383a42;
}
.punctuation.definition.heading,
.punctuation.definition.identity {
  color: #4078f2;
}
.punctuation.definition.bold {
  color: #c18401;
  font-weight: bold;
}
.punctuation.definition.italic {
  color: #a626a4;
  font-style: italic;
}
.punctuation.section.embedded {
  color: #ca1243;
}
.punctuation.section.method,
.punctuation.section.class,
.punctuation.section.inner-class {
  color: #383a42;
}
.support.class {
  color: #c18401;
}
.support.type {
  color: #0184bc;
}
.support.function {
  color: #0184bc;
}
.support.function.any-method {
  color: #4078f2;
}
.entity.name.function {
  color: #4078f2;
}
.entity.name.class,
.entity.name.type.class {
  color: #c18401;
}
.entity.name.section {
  color: #4078f2;
}
.entity.name.tag {
  color: #e45649;
}
.entity.other.attribute-name {
  color: #986801;
}
.entity.other.attribute-name.id {
  color: #4078f2;
}
.meta.class {
  color: #c18401;
}
.meta.class.body {
  color: #383a42;
}
.meta.method-call,
.meta.method {
  color: #383a42;
}
.meta.definition.variable {
  color: #e45649;
}
.meta.link {
  color: #986801;
}
.meta.require {
  color: #4078f2;
}
.meta.selector {
  color: #a626a4;
}
.meta.separator {
  background-color: #373b41;
  color: #383a42;
}
.meta.tag {
  color: #383a42;
}
.underline {
  text-decoration: underline;
}
.none {
  color: #383a42;
}
.invalid.deprecated {
  color: #000000 !important;
  background-color: #f2a60d !important;
}
.invalid.illegal {
  color: #ffffff !important;
  background-color: #ff1414 !important;
}
.markup.bold {
  color: #986801;
  font-weight: bold;
}
.markup.changed {
  color: #a626a4;
}
.markup.deleted {
  color: #e45649;
}
.markup.italic {
  color: #a626a4;
  font-style: italic;
}
.markup.heading {
  color: #e45649;
}
.markup.heading .punctuation.definition.heading {
  color: #4078f2;
}
.markup.link {
  color: #a626a4;
}
.markup.inserted {
  color: #50a14f;
}
.markup.quote {
  color: #986801;
}
.markup.raw {
  color: #50a14f;
}
.source.cs .keyword.operator {
  color: #a626a4;
}
.source.css .property-name,
.source.css .property-value {
  color: #696c77;
}
.source.css .property-name.support,
.source.css .property-value.support {
  color: #383a42;
}
.source.gfm .markup {
  -webkit-font-smoothing: auto;
}
.source.gfm .link .entity {
  color: #4078f2;
}
.source.ini .keyword.other.definition.ini {
  color: #e45649;
}
.source.java .storage.modifier.import {
  color: #c18401;
}
.source.java .storage.type {
  color: #c18401;
}
.source.java-properties .meta.key-pair {
  color: #e45649;
}
.source.java-properties .meta.key-pair > .punctuation {
  color: #383a42;
}
.source.js .keyword.operator {
  color: #0184bc;
}
.source.js .keyword.operator.delete,
.source.js .keyword.operator.in,
.source.js .keyword.operator.of,
.source.js .keyword.operator.instanceof,
.source.js .keyword.operator.new,
.source.js .keyword.operator.typeof,
.source.js .keyword.operator.void {
  color: #a626a4;
}
.source.json .meta.structure.dictionary.json > .string.quoted.json {
  color: #e45649;
}
.source.json .meta.structure.dictionary.json > .string.quoted.json > .punctuation.string {
  color: #e45649;
}
.source.json .meta.structure.dictionary.json > .value.json > .string.quoted.json,
.source.json .meta.structure.array.json > .value.json > .string.quoted.json,
.source.json .meta.structure.dictionary.json > .value.json > .string.quoted.json > .punctuation,
.source.json .meta.structure.array.json > .value.json > .string.quoted.json > .punctuation {
  color: #50a14f;
}
.source.json .meta.structure.dictionary.json > .constant.language.json,
.source.json .meta.structure.array.json > .constant.language.json {
  color: #0184bc;
}
.source.ruby .constant.other.symbol > .punctuation {
  color: inherit;
}
.source.python .keyword.operator.logical.python {
  color: #a626a4;
}
.source.python .variable.parameter {
  color: #986801;
}
</style>
  </head>
  <body class="markdown-preview" data-use-github-style=""><h3 id="cache-replacement-competition-framework">Cache Replacement Competition Framework</h3>
<h5 id="-jipeng-wu-"><strong>Jipeng Wu</strong></h5>
<h4 id="why-what-and-how">Why, What and How</h4>
<h5 id="why-crc-">Why CRC?</h5>
<ul>
<li>CRC and its trace generator &#39;pin&#39; are old, But it&#39;s hard to find another cmp memory simulator.</li>
<li>CRC&#39;s user-visible code is well decoupled. It doesn&#39;t include any header of simulator or 3rd party libraries. Therefore, there is zero technical obstacle even without decent documentation.</li>
</ul>
<h5 id="the-simulation-target">The Simulation Target</h5>
<p>CRC simulates a CMP Memory System:</p>
<ul>
<li>8-staged 4-wide pipeline</li>
<li>out-of-order processor</li>
<li>L1-L2-L3, 3 layer caches</li>
<li>perfect branch prediction</li>
</ul>
<p>L1 has icache and dcache. L2 is dcache. L3, also called LLC, is the cache where I will try to implement novel replacement strategies.</p>
<h5 id="how-crc-works">How CRC works</h5>
<p>The CRC code is probably borrowed from CMP$IM.  I thought they were naturally open source but they weren&#39;t. The simulator code is a blackbox library. Only cache replacement code is user visible. So I should compile the cache replacement module, and link with CRC static lib and CRC&#39;s dependencies.</p>
<p>The source code provided in CRC project is actually an Intel binary tool &#39;pin&#39;, used to generate traces. It is a bad news for me since it&#39;s hard to hack into cache data, which is crucial for debugging and analysis.</p>
<h4 id="build-and-run">Build and Run</h4>
<h5 id="linux-kernel-version-problem">Linux kernel version problem</h5>
<p>I followed its readme, configured and compiled the CRC project on <em>Fedora 23</em>. This build was smooth and fast. It has some rarely seen lib dependencies, yet most are already provided. However I encountered a compatability problem.</p>
<p>CRC uses Intel binary tool &#39;pin&#39; as trace generator. Unfortunately even the latest pin tool doesn&#39;t support Linux 4.x. So I installed <em>Ubuntu 12</em> whose kernel is 3.2, but it didn&#39;t work.</p>
<p>Then I realized this simulator is really old, and found that it was based on CMP$IM proposed in 2006. So I decided to install <em>Ubuntu 10.04</em>, the oldest ubuntu with package support.</p>
<p>On Ubuntu 10.04, the default CRC project still has some problems. I modified the &#39;pin&#39; file(It&#39;s a shell script.) and supplied everything it requires.</p>
<h5 id="generate-traces">Generate traces</h5>
<p>Finally, &#39;pin&#39; is fed with correct version of everything. I generated one trace &#39;cat&#39;. The cat.out.trace.gz is used as CRC input file.
<img src="/Users/wjp/workspace/blog/hexoblog/source/_posts/crc3.jpg" alt=""></p>
<p>&#39;pin&#39; can generate millions of instructions. I just minimizes the inst_nr to run a short benchmark.</p>
<p>To generate N-core traces, just combine N different traces.</p>
<h5 id="run-simulation">Run simulation</h5>
<p>The CRC simulator can set thread number, cache configuration and replacement policy number.
<img src="/Users/wjp/workspace/blog/hexoblog/source/_posts/crc1.jpg" alt="">
<img src="/Users/wjp/workspace/blog/hexoblog/source/_posts/crc2.jpg" alt=""></p>
<h4 id="summary">Summary</h4>
<p>I spent quite a few hours installing older linux today. But in the end the environment was set up.</p>
<p>The next step is to read more on Intel&#39;s L3 caching related paper and try to implement them.</p>
<p>My goal is to design and implement a novel algorithm. It would probably be a variant or hybrid of big names.</p></body>
</html>
]]></content>
    
    <summary type="html">
    
      &lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
      &lt;meta charset=&quot;utf-8&quot;&gt;
      &lt;title&gt;crc-framework&lt;/title&gt;
      &lt;style&gt;.markdown-preview:not([data-use
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="wjpjw.github.io/2016/09/08/crc-framework/"/>
    <id>wjpjw.github.io/2016/09/08/crc-framework/</id>
    <published>2016-09-08T05:31:03.000Z</published>
    <updated>2016-09-08T07:52:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cache-Replacement-Competition-Framework"><a href="#Cache-Replacement-Competition-Framework" class="headerlink" title="Cache Replacement Competition Framework"></a>Cache Replacement Competition Framework</h3><h5 id="Jipeng-Wu"><a href="#Jipeng-Wu" class="headerlink" title="Jipeng Wu"></a><strong>Jipeng Wu</strong></h5><h4 id="Why-What-and-How"><a href="#Why-What-and-How" class="headerlink" title="Why, What and How"></a>Why, What and How</h4><h5 id="Why-CRC"><a href="#Why-CRC" class="headerlink" title="Why CRC?"></a>Why CRC?</h5><ul>
<li>CRC and its trace generator ‘pin’ are old, But it’s hard to find another cmp memory simulator.</li>
<li>CRC’s user-visible code is well decoupled. It doesn’t include any header of simulator or 3rd party libraries. Therefore, there is zero technical obstacle even without decent documentation.</li>
</ul>
<h5 id="The-Simulation-Target"><a href="#The-Simulation-Target" class="headerlink" title="The Simulation Target"></a>The Simulation Target</h5><p>CRC simulates a CMP Memory System:</p>
<ul>
<li>8-staged 4-wide pipeline</li>
<li>out-of-order processor</li>
<li>L1-L2-L3, 3 layer caches</li>
<li>perfect branch prediction</li>
</ul>
<p>L1 has icache and dcache. L2 is dcache. L3, also called LLC, is the cache where I will try to implement novel replacement strategies.</p>
<h5 id="How-CRC-works"><a href="#How-CRC-works" class="headerlink" title="How CRC works"></a>How CRC works</h5><p>The CRC code is probably borrowed from CMP$IM.  I thought they were naturally open source but they weren’t. The simulator code is a blackbox library. Only cache replacement code is user visible. So I should compile the cache replacement module, and link with CRC static lib and CRC’s dependencies.</p>
<p>The source code provided in CRC project is actually an Intel binary tool ‘pin’, used to generate traces. It is a bad news for me since it’s hard to hack into cache data, which is crucial for debugging and analysis.</p>
<h4 id="Build-and-Run"><a href="#Build-and-Run" class="headerlink" title="Build and Run"></a>Build and Run</h4><h5 id="Linux-kernel-version-problem"><a href="#Linux-kernel-version-problem" class="headerlink" title="Linux kernel version problem"></a>Linux kernel version problem</h5><p>I followed its readme, configured and compiled the CRC project on <em>Fedora 23</em>. This build was smooth and fast. It has some rarely seen lib dependencies, yet most are already provided. However I encountered a compatability problem.</p>
<p>CRC uses Intel binary tool ‘pin’ as trace generator. Unfortunately even the latest pin tool doesn’t support Linux 4.x. So I installed <em>Ubuntu 12</em> whose kernel is 3.2, but it didn’t work.</p>
<p>Then I realized this simulator is really old, and found that it was based on CMP$IM proposed in 2006. So I decided to install <em>Ubuntu 10.04</em>, the oldest ubuntu with package support.</p>
<p>On Ubuntu 10.04, the default CRC project still has some problems. I modified the ‘pin’ file(It’s a shell script.) and supplied everything it requires.</p>
<h5 id="Generate-traces"><a href="#Generate-traces" class="headerlink" title="Generate traces"></a>Generate traces</h5><p>Finally, ‘pin’ is fed with correct version of everything. I generated one trace ‘cat’. The cat.out.trace.gz is used as CRC input file.<br><img src="images/crc3.jpg" alt=""></p>
<p>‘pin’ can generate millions of instructions. I just minimizes the inst_nr to run a short benchmark.</p>
<p>To generate N-core traces, just combine N different traces.</p>
<h5 id="Run-simulation"><a href="#Run-simulation" class="headerlink" title="Run simulation"></a>Run simulation</h5><p>The CRC simulator can set thread number, cache configuration and replacement policy number.<br><img src="images/crc1.jpg" alt=""><br><img src="images/crc2.jpg" alt=""></p>
<h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>I spent quite a few hours installing older linux today. But in the end the environment was set up.</p>
<p>The next step is to read more on Intel’s L3 caching related paper and try to implement them.</p>
<p>My goal is to design and implement a novel algorithm. It would probably be a variant or hybrid of big names.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Cache-Replacement-Competition-Framework&quot;&gt;&lt;a href=&quot;#Cache-Replacement-Competition-Framework&quot; class=&quot;headerlink&quot; title=&quot;Cache Replacem
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>高级微处理器架构</title>
    <link href="wjpjw.github.io/2016/09/01/adv-microarchitecture/"/>
    <id>wjpjw.github.io/2016/09/01/adv-microarchitecture/</id>
    <published>2016-09-01T04:35:09.000Z</published>
    <updated>2016-09-02T00:30:29.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="技术" scheme="wjpjw.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="学术" scheme="wjpjw.github.io/tags/%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>大数据</title>
    <link href="wjpjw.github.io/2016/09/01/big-data/"/>
    <id>wjpjw.github.io/2016/09/01/big-data/</id>
    <published>2016-09-01T04:34:28.000Z</published>
    <updated>2016-09-01T04:34:46.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="技术" scheme="wjpjw.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="学术" scheme="wjpjw.github.io/tags/%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>安全计算系统</title>
    <link href="wjpjw.github.io/2016/09/01/secure-computing-system/"/>
    <id>wjpjw.github.io/2016/09/01/secure-computing-system/</id>
    <published>2016-09-01T04:22:16.000Z</published>
    <updated>2016-09-06T05:32:26.000Z</updated>
    
    <content type="html"><![CDATA[<!--Week1---->
<h1 id="安全计算系统的基本概念"><a href="#安全计算系统的基本概念" class="headerlink" title="安全计算系统的基本概念"></a>安全计算系统的基本概念</h1><h3 id="What-is-Computer-Security-gassbook-c1"><a href="#What-is-Computer-Security-gassbook-c1" class="headerlink" title="What is Computer Security(gassbook-c1)"></a>What is Computer Security(gassbook-c1)</h3><h4 id="SECRECY-INTEGRITY-AND-DENIAL-OF-SERVICE"><a href="#SECRECY-INTEGRITY-AND-DENIAL-OF-SERVICE" class="headerlink" title="SECRECY, INTEGRITY, AND DENIAL OF SERVICE"></a>SECRECY, INTEGRITY, AND DENIAL OF SERVICE</h4><ol>
<li>Secrecy/Confidentiality：protecting the information from disclosure to unauthorized parties.</li>
<li>Integrity: protecting information from being modified by unauthorized parties.</li>
<li>Denial of service: 可能是机器故障导致信息损失。</li>
</ol>
<p>计算安全主要研究的是secrecy，信息不泄露。至于信息的integrity主要是指信息没被修改，实际上在商业软件中更常用，不过没多少研究者感兴趣，还好integrity需要的技术和secrecy差不多。至于denial of service虽然也是信息安全的话题，却不再讨论范围内，原因是软件正确性这一话题太难了，大多数情况下根本实现不了。</p>
<a id="more"></a>
<h4 id="可信系统评价标准"><a href="#可信系统评价标准" class="headerlink" title="可信系统评价标准"></a>可信系统评价标准</h4><p>美国国防部发布橙皮书：Trusted Computer System Evaluation Criteria，定义了安全概念。商用可以很容易通过加装一些addon达到C1或C2。只有军用才会追求A1或B3。<br><img src="/images/secure-level.png" alt="软件安全等级"></p>
<h3 id="Trusted-Computing"><a href="#Trusted-Computing" class="headerlink" title="Trusted Computing"></a>Trusted Computing</h3><h4 id="1-什么是TC"><a href="#1-什么是TC" class="headerlink" title="1. 什么是TC?"></a>1. 什么是TC?</h4><p>The Trusted Computing Group (TCG)是Microsoft, Intel, IBM, HP and AMD联合提出的更加安全的PC标准。这里安全的定义颇有争议。按TCG标准做的PC从微软、intel角度来看更可信，但对PC拥有者来说反而更不可信。TCG将你的控制权更多地转移给硬件、软件提供商。TC在这些公司叫法都不一样，故意让公众对此感到混淆。</p>
<h4 id="2-TC做的是什么？"><a href="#2-TC做的是什么？" class="headerlink" title="2. TC做的是什么？"></a>2. TC做的是什么？</h4><p>TC提供一个让你无权控制、更改软件的计算平台。动机源于digital rights management (DRM)。</p>
<p>TC使得如下可能成立，例如：</p>
<ol>
<li>卖一个只准拷贝三次的音乐。</li>
<li>必须24小时看完的电影，即租用软件。</li>
<li>禁止使用unlicensed software。</li>
<li>TC app可以互相依赖，non-TC app被各种歧视。</li>
<li>让政府部门创立的doc一创建就是classified，不会泄露。</li>
<li>远程审查，用traitor tracing的方式举报非法资源，远程删除某人机器上的音乐。</li>
<li>office可以用只有微软产品才能访问的秘钥，使得其他软件无法打开doc等。</li>
</ol>
<p>当然TC不会立刻让以前的东西用不了，会潜移默化，逐步实施。TC-PC必须比普通PC更好用，否则无法流行。</p>
<h4 id="3-TC是如何工作的"><a href="#3-TC是如何工作的" class="headerlink" title="3. TC是如何工作的?"></a>3. TC是如何工作的?</h4><p>TC为以后的PC提供一个监视与举报挂载组件。第一阶段的TC倾向于使用Fritz芯片——焊在主板上的智能芯片或dongle。当前的TC倾向于五个组件：</p>
<ol>
<li>Fritz芯片</li>
<li>CPU中的curtained memory机制</li>
<li>每个TC程序中的安全内核（微软称之为“NCA”）</li>
<li>一个操作系统安全内核（微软称之为“Nexus”）</li>
</ol>
<p>早期TC和Fritz监视boot进程，这样只要软硬件已知，PC最终会进入可预测的状态。</p>
<p>目前TC将Fritz作为一个消极监视组件，存储极其开始时的hash。这个hash用硬件细节来计算。如果机器最终进入了approved state，Fritz就会把TC密钥提供给操作系统。否则极其就无法获取TC密钥，只能跑non-TC程序，读non-TC数据。</p>
<p>Nexus桥接了Fritz和NCA，检查硬件组件是否在TCG认可名单里，软件是否已签约，序列号是否吊销了。如果PC配置有变，则机器联网重新认证这些信息。Nexus协作curtained memory阻止TC程序读写其他TC程序的数据。这种curtained memory机制在Intel中被称为Lagrande Technology，在AMD被成为TrustZone.</p>
<p>当机器在approved state运行TC程序时，Fritz会通过第三方，比如Disney，对copy的合法性进行认证。Disney服务器发送加密数据和密钥，Fritz只会把密钥提供给授权程序。这样整个环境就是trustworthy的。</p>
<h4 id="4-TC的利益相关"><a href="#4-TC的利益相关" class="headerlink" title="4. TC的利益相关"></a>4. TC的利益相关</h4><p>Disney等娱乐公司当然是最大受益方。</p>
<p>Intel垄断PC芯片，想要扩张，就要扩大PC市场，保证PC的DRM是避免PC地位下降的防守策略。</p>
<p>Microsoft可以得益于：</p>
<ol>
<li>卖出更多正版</li>
<li>增强用户黏性，提升换用其他软件的成本</li>
</ol>
<p>各种安全软件提供商会血崩。</p>
<p>有权利掌控TC基础设施的一方会拥有强大的独裁权力，可能被滥用。</p>
<h4 id="云舒的观点"><a href="#云舒的观点" class="headerlink" title="云舒的观点"></a>云舒的观点</h4><p>关于可信计算，就我的判断这确实是一个理想中的东西，解决的是真空中的球形鸡的问题，对于真实的环境毫无用处，对于其它理论的推进也毫无帮助，研究者是有意无意的骗子。做这个结论，是因为我很懂安全攻防，同时懂一点点可信计算理论。</p>
<p>回到技术的角度，我假设你可以在计算机里面搞个芯片，对所有的进程作签名，没签名的进程不许启动（其实这步在企业中已经是不可实现的了，假设在某些特殊特殊再特殊的部门可以实现），有用？SQL注入是怎么做的？恶意代码在数据库的进程内部直接执行了。溢出攻击怎么做的？恶意代码在攻击目标的进程内部直接执行了。XSS怎么做的？CSRF怎么做的？恶意代码是你自己在浏览器里面执行的。</p>
<p>why？这是冯诺伊曼计算机结构决定的，数据和指令没有分开啊大哥。可信计算通过进程级别的签名能够解决的了？你能够对CPU的每一条指令签名么？（且不说还有无数的网络攻击，ARP攻击怎么做的？交换机端口劫持怎么做的？BGP劫持怎么做的？）</p>
<p>你说用TPM芯片作计算机认证，OK，这个没问题。但是这对于企业安全来说，是细枝末节的细枝末节。每年有多少入侵是因为员工PC非法授权入侵的？沧海一粟。员工都是上网看了几个网站，然后就有恶意代码在浏览器里面执行了就上线了好么？用TPM作全盘加密比如微软的BitLocker，但是别人根本不依赖TPM，有没有这东西无所谓啊，而且全盘加密对企业安全重要么？有多少企业实施了？</p>
<p>不要想着从最底层，从BIOS层解决问题。越到底层，丢失的上下文越多，数据越失去意义。可信计算在企业中无法实施，而且即使实施了，在实质性的提升企业安全能力上面，解决不了任何问题。现在不能，将来也不能。我就是死黑可信计算，如果谁拿出可信计算在企业中的成功案例，我立马道歉。</p>
<h4 id="现状总结"><a href="#现状总结" class="headerlink" title="现状总结"></a>现状总结</h4><p>tcg在pc上失败了，在移动领域被tee抢占风头，物联网也是悲剧，目前主流物联网安全方案都没有tcg的事。物联网上是碎片化的解决方案，各个芯片方案商方案都不一样。</p>
<p>可信计算无法防止对应用层漏洞的攻击，然而大部分攻击都是针对应用层的。</p>
<p>最新的可信计算保护的范围越来越小，不一定算严格的可信计算，如ARM的TrustZone，Intel的SGX。</p>
<!--Week2~3---->
<h1 id="设计原则与底层实现"><a href="#设计原则与底层实现" class="headerlink" title="设计原则与底层实现"></a>设计原则与底层实现</h1><h2 id="设计原则-信息保护-see-also-chapter-5-of-Gasser-book"><a href="#设计原则-信息保护-see-also-chapter-5-of-Gasser-book" class="headerlink" title="设计原则: 信息保护 (see also chapter 5 of Gasser book)"></a>设计原则: 信息保护 (see also chapter 5 of Gasser book)</h2><h3 id="Glossary"><a href="#Glossary" class="headerlink" title="Glossary"></a>Glossary</h3><ul>
<li>Capability: In a computer system, an unforgeable ticket, which when presented can be taken as incontestable proof that the presenter is authorized to have access to the object named in the ticket.</li>
<li>Certify: To check the accuracy, correctness, and completeness of a security or protection mechanism</li>
<li>Confinement: Allowing a borrowed program to have access to data, while ensuring that the program cannot release the information.</li>
<li>Descriptor: A protected value which is (or leads to) the physical address of some protected object.</li>
<li>Domain: The set of objects that currently may be directly accessed by a principal.</li>
<li>Permission: A particular form of allowed access, e.g., permission to READ as contrasted with permission to WRITE</li>
<li>Prescript: A rule that must be followed before access to an object is permitted, thereby introducing an opportunity for human judgment about the need for access, so that abuse of the access is discouraged.</li>
<li>Principal: The entity in a computer system to which authorizations are granted; thus the unit of accountability in a computer system.</li>
<li>Propagation: When a principal, having been authorized access to some object, in turn authorizes access to another principal.</li>
<li>Protected object: A data structure whose existence is known, but whose internal organization is not accessible, except by invoking the protected subsystem (q.v.) that manages it.</li>
<li>Revoke: To take away previously authorized access from some principal.</li>
<li><em>Security: With respect to information processing systems, used to denote mechanisms and techniques that control who may use or modify the computer or the information stored in it.</em></li>
<li><em>Privacy: The ability of an individual (or organization) to decide whether, when, and to whom personal (or organizational) information is released.</em></li>
</ul>
<h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><h4 id="三种安全侵犯的类别："><a href="#三种安全侵犯的类别：" class="headerlink" title="三种安全侵犯的类别："></a>三种安全侵犯的类别：</h4><ol>
<li>未授权的信息发布。</li>
<li>未授权的信息修改。</li>
<li>未授权的拒绝使用。<h4 id="5个信息保护的功能等级："><a href="#5个信息保护的功能等级：" class="headerlink" title="5个信息保护的功能等级："></a>5个信息保护的功能等级：</h4>后四个才有意义，是动态改变访问授权的系统。</li>
<li>Unprotected systems：可能有许多防错机制，但本质上完全不安全。</li>
<li>All-or-nothing systems：为用户提供隔离，使之就像在用私人pc，也有一些共享lib。</li>
<li>Controlled sharing：明确规定谁能访问哪个数据项。每个文件维护用户列表，详注读、写、执行权。</li>
<li>User-programmed sharing controls：用户可以编写protected objects+subsystem，subsystem提供protocol，完全避免外界直接访问object，可以提供更灵活复杂的数据访问控制，比如每天几点到几点允许谁查阅某文件，其他时候拒绝访问。</li>
<li>Putting strings on information：以上三种都只是在release信息的条件上做文章，这一层是在release之后仍然对信息做限制或警告，比如在文件上打印Top Secret，表明这是不允许外泄的机密文件。</li>
</ol>
<h4 id="8个基于经验的设计原则："><a href="#8个基于经验的设计原则：" class="headerlink" title="8个基于经验的设计原则："></a>8个基于经验的设计原则：</h4><ul>
<li>Economy of mechanism： 设计得越小越好！常规使用软件不会用到奇葩或非法路径，所以错误很难自动滚出来，所以这种代码依赖line-by-line inspection和硬件检测，程序越小越方便。</li>
<li>Fail-safe defaults：用白名单，不用黑名单，这样名单不全问题不大。</li>
<li>Complete mediation：所有访问都得查，那种记住check结果的思路很可能有问题。</li>
<li>Open design：设计不应该成为秘密。安全机制不应该基于潜在攻击者的无知，因为他们说不定哪天就有知了。</li>
<li>Separation of privilege：一个需要两个key来unlock的保护机制更加鲁棒也更加灵活。</li>
<li>Least privilege：每个程序或用户要做某事时只需要获取最低的权限，不应获取额外的权限。</li>
<li>Least common mechanism：减少那些对多个用户通用的共享机制，尤其是涉及共享变量的。</li>
<li>Psychological acceptability：用户接口应该好用，不要默认地就容易出错，也要符合用户对安全机制的思维印象。</li>
</ul>
<p>传统物理安全分析者提出的额外两点，不是完全适用信息安全：</p>
<ul>
<li>Work factor： 比较规避防御机制的成本与攻击者的资源，例如算算暴力破解RSA的work factor，自然是比较大的。</li>
<li>Compromise recording：记录信息的compromise(不得不变的一些东西)，比如文件timestamp，有时就是被人改了的证据。</li>
</ul>
<h4 id="虚拟机的例子（time-sharing-system的地址隔离）"><a href="#虚拟机的例子（time-sharing-system的地址隔离）" class="headerlink" title="虚拟机的例子（time-sharing system的地址隔离）"></a>虚拟机的例子（time-sharing system的地址隔离）</h4><p>一个vm对几个用户来说大家都在单机，察觉不到其他人，除了性能差了点。主要隔离手段是descriptor寄存器，descriptor存放可访问的内存的base和bound。只有privilege态才能load descriptor，有一个supervisor程序在privilege态运行并模拟各个虚拟cpu。其实和OS内核态的思路一样，就是等级制度。</p>
<p>这个例子抽象以下就是三个防御措施：</p>
<ul>
<li>descriptor机制保护program界限：guard就是强制descriptor限制的硬件。带门之不可穿越之墙就是逼迫所有内存引用都要经过descriptor限制的硬件机制。descriptor的限制检查很简单，就是看看地址是否在A~B。</li>
<li>privilege bit机制保护descriptor内容：查看程序是否在特权态，不是就不准访问、篡改descriptor。</li>
<li>允许非特权程序执行一个指令“开启特权态并将控制权转交给supervisor”，不允许非特权程序privilege bit为on，特权程序可以变得不特权。</li>
</ul>
<h4 id="authen系统的例子"><a href="#authen系统的例子" class="headerlink" title="authen系统的例子"></a>authen系统的例子</h4><p>虚拟机若与终端相连，就得身份验证，第二个例子就是authen system。常用password或不可伪造之证物（钥匙、刷脸）来单向authenticate user。问题就在于user不能authenticate系统，这样入侵者可以拦截所有user输入再转发给系统，这就是隐患。<br>解决方案是system和user持有相同的key，然后将交流信息encipher+decipher，这样的authen就不怕拦截转发了。<br>其实这个在密码学里讲了很多，mac then encrypt。</p>
<h4 id="shared-information的实现"><a href="#shared-information的实现" class="headerlink" title="shared information的实现"></a>shared information的实现</h4><ul>
<li>list-oriented，每个guard维护一个用户list，允许多个用户使用目标数据。</li>
<li>ticket-oriented，guard只有一个identifier的描述，每个user有很多identifiers，或者说tickets，即门票。</li>
</ul>
<h3 id="基于Descriptor的保护系统"><a href="#基于Descriptor的保护系统" class="headerlink" title="基于Descriptor的保护系统"></a>基于Descriptor的保护系统</h3><h4 id="地址隔离"><a href="#地址隔离" class="headerlink" title="地址隔离"></a>地址隔离</h4><p>内存分段，即segment，用descriptor描述。就是现代os里的东西。</p>
<h4 id="The-Capability-System"><a href="#The-Capability-System" class="headerlink" title="The Capability System"></a>The Capability System</h4><h5 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h5><p>capability system可以由supervisor+privilege bit实现。</p>
<h5 id="共享的动态授权"><a href="#共享的动态授权" class="headerlink" title="共享的动态授权"></a>共享的动态授权</h5><p>Sender’s part:</p>
<ul>
<li>Sender learns receiver’s principal identifier via a communication path outside the system.</li>
<li>Sender transmits receiver’s principal identifier to some program running inside the system under the accountability of the sender.</li>
<li>Sender’s program uses receiver’s principal identifier to ensure that only virtual processors operating under the accountability of the receiver will be able to obtain the capability being transmitted.</li>
</ul>
<p>Receiver’s part:</p>
<ul>
<li>Receiver learns sender’s principal identifier, via a communication path outside the system.</li>
<li>Receiver transmits sender’s principal identifier to some program running inside the system under the accountability of the receiver.</li>
<li>Receiver’s program uses the sender’s principal identifier to ensure that only a virtual processor operating under the accountability of the sender could have sent the capability being received.</li>
</ul>
<h5 id="Propagation-Copy-Bit"><a href="#Propagation-Copy-Bit" class="headerlink" title="Propagation(Copy Bit!)"></a>Propagation(Copy Bit!)</h5><p> A bit added to a capability (the copy bit) may be used to indicate whether or not the capability may be stored in a segment. If one user gives another user access to a capability with the copy bit OFF, then the second user could not make copies of the capability he has borrowed. Propagation would be prevented, at the price of lost flexibility.</p>
<h4 id="访问控制列表系统-Prescript-）"><a href="#访问控制列表系统-Prescript-）" class="headerlink" title="访问控制列表系统(Prescript!）"></a>访问控制列表系统(Prescript!）</h4><p>Capability system如果是ticket-oriented，那么Access Control List System必然是list-oriented。</p>
<p>The hierarchical control scheme might be used in a timesharing system as follows. The first access controller created is given an access control list naming one user, a system administrator. The system administrator creates several access controllers (for example, one for each department in his company) and grants permission to modify access in each controller to the department administrator. The department administrator can create additional access controllers in a tree below the one for his department, perhaps for subdepartments or individual computer users in his department. These individual users can develop any pattern of sharing they wish, through the use of access control lists in access controllers, for the segments they create. In an emergency, however, the department administrator can intevene and modify any access control list in his department. Similarly, the system administrator can intervene in case a department administrator makes a mistake or is unavailable.41</p>
<p>Whenever an attempt is made to modify an access control list (either by a special store instruction or by a call to a supervisor entry, depending on the implementation), the access-modifying permission of the higher level access controller regulating the access control list is checked as always. If the permission exists, the <em>prescript field</em> of the access control list that is about to be modified is examined, and some action, depending on the value found, is automatically triggered. The following list suggests some possible actions that might be triggered by the prescript value, and some external policies that can be modeled with the prescript scheme:</p>
<ul>
<li>No action.</li>
<li>Identifier of principal making change is logged (the “audit trail”).</li>
<li>Change is delayed one day (“cooling-off” period).</li>
<li>Change is delayed until some other principal attempts the same change (“buddy” system).</li>
<li>Change is delayed until signal is received from some specific (system-designated) principal (“court order”).</li>
</ul>
<h4 id="Protecting-Objects-Other-Than-Segments"><a href="#Protecting-Objects-Other-Than-Segments" class="headerlink" title="Protecting Objects Other Than Segments"></a>Protecting Objects Other Than Segments</h4><p><a href="http://web.mit.edu/Saltzer/www/publications/protection/Descriptors.html" target="_blank" rel="external">这几段以后用到再看吧，尤其是访问控制列表系统。</a></p>
<h2 id="IA32的内存保护"><a href="#IA32的内存保护" class="headerlink" title="IA32的内存保护"></a>IA32的内存保护</h2><p>Segment不必说，我以前写过。</p>
<p>Paging当时跳过了，不过IA32是提供page-level protection的：</p>
<ul>
<li>Restriction of addressable domain (supervisor and user modes).</li>
<li>Page type (read only or read/write).</li>
</ul>
<p>IA32的segment protection实际上已经成为一种legacy，paging开启之后，主要靠paging的protection，可以设置read-only，哪个权限下read-only。</p>
<h2 id="VM以及VM-Monitor"><a href="#VM以及VM-Monitor" class="headerlink" title="VM以及VM Monitor"></a>VM以及VM Monitor</h2><p>Virtualization本质上是接口实现解耦的过程，是guest system与host之间同构(isomorphism)的构造。VM的实现就是用真实硬件+软件一起实现一个接口。</p>
<p>VM分类：</p>
<ul>
<li>Process VM：基于特定ISA开发的VM，为Application层提供虚拟ABI。缺点是不同硬件平台要重新开发，不同操作系统也要重新开发。在Process VM上，程序编译出来字节码和真实的差不多，只是没有详细的寄存器分配，然后根据ISA去跑。换平台字节码要重新编译。</li>
<li>High Level Language VM：基于跨平台理念开发的VM，其实就是硬件解耦做的更好。在编译时生成更加抽象更通用的generic stack-based ISA code。这种虚拟ISA本质上就是HLLVM跑的机器码。JVM和CLI .Net是最著名的HLLVM。</li>
<li>System VM：其实就是一台硬件上的的多个软件分身，每一个都感觉自己独一无二，这种感觉依赖VMM(又叫hypervisor)。</li>
</ul>
<p>没提到bochs，qmenu这种完全模拟的，应该是接近Full emulation，所以不算virtualization。</p>
<p>至于VMM，实际上是运行在VM与多个客户终端间的another layer of indirection，将file、user、group、process tree、device、semaphore/shared memory/msgs全部isolate。VMM又称Hypervisor。VMM使得各个用户觉得自己拥有所有硬件，实际上是分享的。譬如用户终端在调用syscall时，VVM知道ISR在哪，相当于中介。用户的os运行在较低privilege的mode下。VVM则是kernel mode。此外，VVM还再存了一个page table，把用户的逻辑地址映射到真实machine地址上。目前Xen、KVM、OpenVZ(只有linux版，但是也好用)就是最常用的VMM，性能比Process VM高多了，又不像JVM之类的有语言限定，模拟的是系统，所以在企业界有广泛应用，可以大幅提高单个服务器主机的利用率。16GB server跑Xen虚拟给两个users，8GB。</p>
<p>Xen在linux上是个application， KVM是个kernel module。SmartOS是一个基于KVM的云操作系统，可以关注下。</p>
<h2 id="Chromium的体系结构"><a href="#Chromium的体系结构" class="headerlink" title="Chromium的体系结构"></a>Chromium的体系结构</h2><p>两层结构：</p>
<ul>
<li>browser kernel：与操作系统互动。代表user行事。它将rendering engine当做解析web内容并输出渲染后的位图文档的黑箱。输入输出依赖IPC。</li>
<li>rendering engine：在一个privilege严格受限的沙盒内运行。代表web发布内容。即使入侵者利用rendering engine漏洞获取其最高权限，也会被沙盒隔离，无法读写用户的文件系统。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!--Week1----&gt;
&lt;h1 id=&quot;安全计算系统的基本概念&quot;&gt;&lt;a href=&quot;#安全计算系统的基本概念&quot; class=&quot;headerlink&quot; title=&quot;安全计算系统的基本概念&quot;&gt;&lt;/a&gt;安全计算系统的基本概念&lt;/h1&gt;&lt;h3 id=&quot;What-is-Computer-Security-gassbook-c1&quot;&gt;&lt;a href=&quot;#What-is-Computer-Security-gassbook-c1&quot; class=&quot;headerlink&quot; title=&quot;What is Computer Security(gassbook-c1)&quot;&gt;&lt;/a&gt;What is Computer Security(gassbook-c1)&lt;/h3&gt;&lt;h4 id=&quot;SECRECY-INTEGRITY-AND-DENIAL-OF-SERVICE&quot;&gt;&lt;a href=&quot;#SECRECY-INTEGRITY-AND-DENIAL-OF-SERVICE&quot; class=&quot;headerlink&quot; title=&quot;SECRECY, INTEGRITY, AND DENIAL OF SERVICE&quot;&gt;&lt;/a&gt;SECRECY, INTEGRITY, AND DENIAL OF SERVICE&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Secrecy/Confidentiality：protecting the information from disclosure to unauthorized parties.&lt;/li&gt;
&lt;li&gt;Integrity: protecting information from being modified by unauthorized parties.&lt;/li&gt;
&lt;li&gt;Denial of service: 可能是机器故障导致信息损失。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;计算安全主要研究的是secrecy，信息不泄露。至于信息的integrity主要是指信息没被修改，实际上在商业软件中更常用，不过没多少研究者感兴趣，还好integrity需要的技术和secrecy差不多。至于denial of service虽然也是信息安全的话题，却不再讨论范围内，原因是软件正确性这一话题太难了，大多数情况下根本实现不了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="wjpjw.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="学术" scheme="wjpjw.github.io/tags/%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>生活中的英语</title>
    <link href="wjpjw.github.io/2016/08/31/lexical-domain-extension/"/>
    <id>wjpjw.github.io/2016/08/31/lexical-domain-extension/</id>
    <published>2016-08-31T04:30:17.000Z</published>
    <updated>2016-09-01T04:27:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>词汇积累平时用quizlet，这里主要记一些日常生活里的词汇。</p>
<a id="more"></a>
<h3 id="汽车相关"><a href="#汽车相关" class="headerlink" title="汽车相关"></a>汽车相关</h3><table>
<thead>
<tr>
<th>中文</th>
<th>英文    </th>
</tr>
</thead>
<tbody>
<tr>
<td>备胎</td>
<td>spare tire</td>
</tr>
<tr>
<td>千斤顶</td>
<td>jack    </td>
</tr>
<tr>
<td>漏气轮胎</td>
<td>flat tire</td>
</tr>
<tr>
<td>拧螺丝的工具</td>
<td>tire iron或breaker bar</td>
</tr>
</tbody>
</table>
<h3 id="cs相关"><a href="#cs相关" class="headerlink" title="cs相关"></a>cs相关</h3><table>
<thead>
<tr>
<th>英文</th>
<th>读音</th>
</tr>
</thead>
<tbody>
<tr>
<td>x[1]</td>
<td>x sub one</td>
</tr>
<tr>
<td>multi-xxx</td>
<td>maotai-xxx</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;词汇积累平时用quizlet，这里主要记一些日常生活里的词汇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="常识" scheme="wjpjw.github.io/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>开始独立游戏开发</title>
    <link href="wjpjw.github.io/2016/08/31/independent-game-development/"/>
    <id>wjpjw.github.io/2016/08/31/independent-game-development/</id>
    <published>2016-08-31T04:00:07.000Z</published>
    <updated>2016-09-02T00:30:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论美术还是编程都让我乐在其中，既然如此，何不学习、探索独立游戏制作呢？</p>
<a id="more"></a>
<h2 id="绘画"><a href="#绘画" class="headerlink" title="绘画"></a>绘画</h2><p>之前一直觉得数控板很贵，的确贵，不过那是在屏幕上直接画的，只是板的话一点都不贵。我买了ugee ex07 graphic tablet，迅速上手。以我的天赋，学什么都很快，所以一定要努力，不可太懒散。</p>
<p>我发现shading还是太难了，看了不少youtube上的视频，真是需要磨练的，而且还费时间，所以我觉得可以不用考虑shading，直接描线+纯色上色，简单干净就好。</p>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>购买了60美元的spine用来制作骨骼动画，免费的骨骼动画软件没有良好的编程API支持，尝试无效，还是spine好用。骨骼动画其实对美术要求不高，既方便又灵活，我觉得比完全碾压序列帧动画（Frame by frame）。</p>
<p>骨骼动画制作属于浪费时间的简单重复劳动。</p>
<h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>目前唯一开源而且有人用的2d引擎是cocos2d，架构非常简单，功能也很少。unreal也是开源的，非常想尝试，不过目前cocos够用了，unreal以后再说吧。短期内我是不会涉足3d的，也不会有钱外包。</p>
<p>unity固然是更好的工具，但是为我所不喜。比如用cocos我可以只用其图形部分，自己实现一个python脚本引擎，然后c++加python做游戏，指定让自己舒服的标准与风格。</p>
<p>其他开源的游戏引擎用的人少，也就不存在特别方便的整合，也没有详实的文档。所以不会考虑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论美术还是编程都让我乐在其中，既然如此，何不学习、探索独立游戏制作呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="日志" scheme="wjpjw.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="技术" scheme="wjpjw.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Archlinux试玩</title>
    <link href="wjpjw.github.io/2016/08/30/archlinux/"/>
    <id>wjpjw.github.io/2016/08/30/archlinux/</id>
    <published>2016-08-31T03:52:42.000Z</published>
    <updated>2016-09-07T18:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Archlinux的安装是手动的，从中能学到一些东西，不过本质上与其他发行版是一样的，不涉及内核修改编译这种真正的定制。装了gnome后，和其他linux发行版感觉差不多。</p>
<a id="more"></a>
<h3 id="配置工具"><a href="#配置工具" class="headerlink" title="配置工具"></a>配置工具</h3><ol>
<li>dhcpcd：一个dhcp客户端。dhcp服务器一般就在局域网的路由器上，用于自动分配正确ip给各个机器。dhcpcd.conf里可以设置静态路由，hostname，static profile等。</li>
<li>启动或关闭服务：systemctl start/stop example.service</li>
<li>pacman：-Syy，同步数据库；-S elinks，安装elinks；-Ss xxx，搜索xxx；-R是删包。</li>
<li>fdisk或gdisk /dev/sda就可以进入partition界面，创建partition table。操作相当简单。</li>
<li>lsblk查看bulk device的挂载情况。</li>
<li>fstab配置挂载，locale.conf配置语言。</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>我觉得kde和gnome都不如xfce4，所以装的是xfce。启动图形界面不用startx，用startxfce4。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Archlinux的安装是手动的，从中能学到一些东西，不过本质上与其他发行版是一样的，不涉及内核修改编译这种真正的定制。装了gnome后，和其他linux发行版感觉差不多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="wjpjw.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="常识" scheme="wjpjw.github.io/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>C++的一种合理用法</title>
    <link href="wjpjw.github.io/2016/08/30/cpp-core-guideline/"/>
    <id>wjpjw.github.io/2016/08/30/cpp-core-guideline/</id>
    <published>2016-08-31T03:06:54.000Z</published>
    <updated>2016-09-01T04:27:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>C++是多范式的，即使是最传统的Better C或面向对象范式仍然有各种各样的风格，比如cocos2d的内存机制要求构造函数不throw，初始化代码放到init里，用addChild显式地制定对象所有权，若无对象拥有指针则在更新时自动析构。这么做非常安全。其实用raii+异常+unique_ptr可以做得同样好，而且更简洁。</p>
<p>不过每隔一段时间，我自己的观点也会变化，所以说这只是阶段性总结。<br><a id="more"></a></p>
<h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><ol>
<li>RAII+值语义是最方便的。所有权明确、生命周期明确、异常安全。依靠现代c++提供的各种值语义工具，自己的类大部分都可以实现值语义。</li>
<li>应该只允许存在const全局变量。单例也不要用。对全局变量的依赖会干扰判断，影响正确性分析。</li>
<li>使用异常。catch里面处理错误，看起来不美观，实际上还是比c风格清晰的。</li>
<li>函数参数应该用裸指针，对象own的成员用unique_ptr。裸指针表示引用，绝对不表示所有权转让。</li>
<li>接口类无状态，就是像java那样。不要用继承去实现代码复用，那只会增加强耦合代码。</li>
<li>可能异常的代码throw就好了，没必要catch，即使catch也只是按照不同异常进行log，不做补救，直接让系统crash掉。</li>
<li>保持简洁，能不写的就不写，比如不需要构造函数、析构函数，那就不写。需要暴露的变量，不写get/set，直接public。</li>
</ol>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ol>
<li>纯c或纯c风格的函数缀上noexcept，表明无异常处理，可优化性能。</li>
<li>基类应该禁用拷贝构造函数，提供virtual的clone。clone返回owner<t*>, owner只用来表示这指针有所有权。</t*></li>
<li>虚函数应该明确指明virtual，override还是final。</li>
<li>使用enum class，不用enum，避免enum转型int这种可能性。</li>
<li>复杂变量初始化可以用lambda。</li>
<li>只要是值语义，就用unique_ptr<t>，不要用T本身，那样需要include类型T的头文件。</t></li>
<li>用vs的话，哪怕实际上编译时不需要，头文件也要include各种类型所在头文件，让静态分析立刻生效，避免语法错误。要知道，c++写错了编译一次又等半天，很痛苦。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++是多范式的，即使是最传统的Better C或面向对象范式仍然有各种各样的风格，比如cocos2d的内存机制要求构造函数不throw，初始化代码放到init里，用addChild显式地制定对象所有权，若无对象拥有指针则在更新时自动析构。这么做非常安全。其实用raii+异常+unique_ptr可以做得同样好，而且更简洁。&lt;/p&gt;
&lt;p&gt;不过每隔一段时间，我自己的观点也会变化，所以说这只是阶段性总结。&lt;br&gt;
    
    </summary>
    
    
      <category term="日志" scheme="wjpjw.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="胡扯" scheme="wjpjw.github.io/tags/%E8%83%A1%E6%89%AF/"/>
    
  </entry>
  
  <entry>
    <title>奇奇怪怪的知识</title>
    <link href="wjpjw.github.io/2016/08/30/spicy-knowledge/"/>
    <id>wjpjw.github.io/2016/08/30/spicy-knowledge/</id>
    <published>2016-08-31T02:51:30.000Z</published>
    <updated>2016-09-01T15:12:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>偶尔更新一些无意中看到的冷门知识。</p>
<a id="more"></a>
<h3 id="阳光直射图"><a href="#阳光直射图" class="headerlink" title="阳光直射图"></a>阳光直射图</h3><p><img src="/images/irradiation.jpg" alt="果然国内的太阳温和很多"></p>
<h3 id="华人实现的语言"><a href="#华人实现的语言" class="headerlink" title="华人实现的语言"></a>华人实现的语言</h3><ol>
<li>ATS-PL-SYS: Hongwei Xi</li>
<li>F#: Tao Liu</li>
<li>sql: 刘英武</li>
<li>php: 惠新宸</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶尔更新一些无意中看到的冷门知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="常识" scheme="wjpjw.github.io/tags/%E5%B8%B8%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>9月日志</title>
    <link href="wjpjw.github.io/2016/08/30/2016-9-log/"/>
    <id>wjpjw.github.io/2016/08/30/2016-9-log/</id>
    <published>2016-08-31T01:41:04.000Z</published>
    <updated>2016-09-08T05:30:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2016-8-30"><a href="#2016-8-30" class="headerlink" title="2016/8/30"></a>2016/8/30</h3><p>今天得主要目标是：</p>
<ol>
<li>搭建blog，hexo+atom，用md写日志。<em>——写了很多！</em></li>
<li>抽象cqscripts的游戏逻辑。<em>——写了一些，通过了stub测试！</em></li>
<li>研究adv. microarchitecture的project选题。<em>——哪有空，明天再说！</em></li>
</ol>
<p>目前看来几门课都很难，因此更要有计划，每天列出目标，狠狠地执行。</p>
<p>最近做菜放油，狂吃碳水化合物，怒喝汽水，完全不锻炼身体，反而变瘦了，估计是饮食随意，摄入的热量偏低。</p>
<a id="more"></a>
<h3 id="2016-8-31"><a href="#2016-8-31" class="headerlink" title="2016/8/31"></a>2016/8/31</h3><p>经过研究，发现研究adv. microarchitecture的project选题中，我选择了PIM Cache Replacement Optimization。这门课的选题非常前沿，除了这个话题以外，其他的课题很难找到两篇以上的论文。Cache replacement optimization则是经典话题。</p>
<p>之前名字差不多的课用C++写过模拟，这门课要用更真实的模拟框架，即SST。这门课老师带队做的MacSim是sst里面的一个component。MacSim是trace-driven cycle-level的异构模拟器，能够为异构提供timing model。这种为论文而产生的工具大多不靠谱，好在老师就是作者，出问题可以很方便地问。</p>
<p>此外，我发现secure computing system不需要课堂参与，但需要海量阅读，我需要在这周花大量时间阅读、整理，不懂的发邮件询问。加油！</p>
<p>今天得主要目标是：</p>
<ol>
<li>继续写游戏，能写多少是多少。</li>
<li>开始做医疗项目，不需要花太多时间，有进度即可。</li>
<li>刷算法题，能写多少是多少。</li>
</ol>
<p><em>很遗憾今天所有目标都没达成，看了一部纪录片the Chinese Mayor和一部cg电影，然后就12点了！</em></p>
<h3 id="2016-9-1"><a href="#2016-9-1" class="headerlink" title="2016/9/1"></a>2016/9/1</h3><p>目标：</p>
<ol>
<li>做医疗项目。不hangout，在slack上报告进度。</li>
<li>怒写游戏逻辑，能写多少是多少。</li>
<li>整理secure computing system的week1~3之全部。</li>
<li>怒刷算法。</li>
</ol>
<p>结果：</p>
<ol>
<li>写了很多，快要收尾了，不过没测试。</li>
<li>删去触发器机制，重构代码，添加一个package“data”，以python dict形式写配置文件。</li>
<li>week1整理完毕，相当有趣。</li>
<li>累了。</li>
</ol>
<h3 id="2016-9-2"><a href="#2016-9-2" class="headerlink" title="2016/9/2"></a>2016/9/2</h3><p>目标和昨天完全一样！</p>
<p>结果：</p>
<ol>
<li>接口不明，等Wally答复。</li>
<li>写了一些，连同之前写的进行了测试，排除了bug，全部改为支持utf-8。</li>
<li>没做。</li>
<li>用非常现代的方式写c++算法，可读性呢很高，写起来也更愉快更有把握，略微加了一些抽象成本。</li>
</ol>
<h3 id="2016-9-3"><a href="#2016-9-3" class="headerlink" title="2016/9/3"></a>2016/9/3</h3><p>今天清理了垃圾；锻炼身体；去超市买了零食、水果和鸡肉；更新了写atom插件；查阅TC现状。<br>其余时间都在娱乐。于是我把目标删了，把明天的目标订的高些，加油。</p>
<h3 id="2016-9-4"><a href="#2016-9-4" class="headerlink" title="2016/9/4"></a>2016/9/4</h3><p>目标：</p>
<ol>
<li>完成安全计算系统week2~3整理。</li>
<li>刷N道算法。</li>
<li>协同cpp引擎开发用户输入事件处理。</li>
</ol>
<p>结果：<br>今天早上睡懒觉，午觉又睡了3个多小时，1~2都没做。<br>3做了以下几件事，就到12点了：</p>
<ul>
<li>在c++引擎中获取python error的std::string。这样就可以方便地把游戏程序当做python的debug平台，按start按钮就运行python。</li>
<li>解决了c++脚本引擎解释的python脚本无法正确import的问题，解决办法更新在<a href="http://wjpjw.github.io/2016/08/30/boost-python/#boost-python的细节">boost-python</a>里。</li>
<li>解决了cqscripts里的小bug。</li>
<li>解决了游戏里的中文显示问题。该问题是vs编译器造成的，应避免在c++源码里写任何中文，读入utf-8的xml, json都可以。我的解决办法是用python脚本传入中文参数给c++写的函数，就不需要额外的xml配置了，全部配置放在cqscripts脚本里。</li>
<li>实现一些暴露给pyhton的api。</li>
</ul>
<h3 id="2016-9-5"><a href="#2016-9-5" class="headerlink" title="2016/9/5"></a>2016/9/5</h3><p>今天是美国劳工节，放假一天。</p>
<ul>
<li>我把atom改成轻色调的，这样虽然屏幕更白，但对比度低，反而不伤眼，把亮度稍微调低一些就很柔和。</li>
<li>花了很长时间整理安全计算系统的诸多论文。</li>
</ul>
<h3 id="2016-9-6"><a href="#2016-9-6" class="headerlink" title="2016/9/6"></a>2016/9/6</h3><p>把宝贵的时间花在文明5上了。</p>
<h3 id="2016-9-7"><a href="#2016-9-7" class="headerlink" title="2016/9/7"></a>2016/9/7</h3><h5 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h5><ol>
<li>完成Adv.MA的MacSim的安装与benchmark。</li>
<li>刷题。</li>
<li>继续写cpp-python游戏引擎。</li>
</ol>
<h5 id="cpp-python进展："><a href="#cpp-python进展：" class="headerlink" title="cpp-python进展："></a>cpp-python进展：</h5><ul>
<li>重构了cpp-python引擎的架构，只在新建gamelayer时运行一次python文件，读取整个python项目的符号。之后所有的update、touched函数都直接在c++中以object的operator()方式调用，简单方便还避免了I/O。</li>
<li>Boost-python的文档很差，没有调用python代码的有用的例子，实际上很简单，就是执行一次exec_file，将python项目执行一遍，各种def就已知了，然后c++从main dict里取出的python函数就可以直接运行，没有任何问题。</li>
<li>此外，boost-python不允许Py_Finalize，必须始终维持同一个解释器。</li>
<li>今天花费很多时间，发现了一个隐式设定：Boost-python里c++先设定一个python全局变量，然后定义一些python函数依赖这个变量，c++再改这个变量，python函数里依赖的变量是固定了不会改的，再去秩序也没用（而且boost-python还禁止Finalize），所以一旦设定了哪个全局变量，就不能重设。因此gamelayer这个联系c++和python的object必须拥有和python解释器相同的生命周期。这也就意味着设计时应该避免销毁gamelayer，把它作为Game全局变量的一个成员。（以后要做的就是讲GameLayer全局化，现在还没做，而是在界面上禁止新建gamelayer。）</li>
</ul>
<h5 id="archlinux进展："><a href="#archlinux进展：" class="headerlink" title="archlinux进展："></a>archlinux进展：</h5><ul>
<li>安装了一个package helper：yaourt，提供了google-chrome。</li>
<li>去掉archlinux的光盘，直接进grub，免得每次开机先进living盘再选进入existing os。</li>
<li>另外，用户名是wjp，密码是123。</li>
<li>xface，gnome，kde都是远不如商用OS的界面，差太远。最好的办法就是用emacs(shell)+atom(editor)+chrome(web)这几个好用的软件，而完全不用系统UI。</li>
<li>今天安装了chrome、atom、emacs。emacs懒得上我的配置了，以后主要用atom，只有在需要大量shell操作才用emacs。鉴于macbook上切屏比linux下切app还方便，所以不是特殊需要就不再archlinux里开chrome了，还是有些卡的。</li>
</ul>
<h5 id="Adv-MA进展："><a href="#Adv-MA进展：" class="headerlink" title="Adv. MA进展："></a>Adv. MA进展：</h5><p>上完课一直在测试crc，直到深夜。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2016-8-30&quot;&gt;&lt;a href=&quot;#2016-8-30&quot; class=&quot;headerlink&quot; title=&quot;2016/8/30&quot;&gt;&lt;/a&gt;2016/8/30&lt;/h3&gt;&lt;p&gt;今天得主要目标是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;搭建blog，hexo+atom，用md写日志。&lt;em&gt;——写了很多！&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;抽象cqscripts的游戏逻辑。&lt;em&gt;——写了一些，通过了stub测试！&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;研究adv. microarchitecture的project选题。&lt;em&gt;——哪有空，明天再说！&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;目前看来几门课都很难，因此更要有计划，每天列出目标，狠狠地执行。&lt;/p&gt;
&lt;p&gt;最近做菜放油，狂吃碳水化合物，怒喝汽水，完全不锻炼身体，反而变瘦了，估计是饮食随意，摄入的热量偏低。&lt;/p&gt;
    
    </summary>
    
    
      <category term="日志" scheme="wjpjw.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>使用Python作C++游戏的脚本</title>
    <link href="wjpjw.github.io/2016/08/30/boost-python/"/>
    <id>wjpjw.github.io/2016/08/30/boost-python/</id>
    <published>2016-08-30T23:20:00.000Z</published>
    <updated>2016-09-05T02:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Boost/python是无缝桥接cpp与python的最好工具。只需“exec某些python文件”，“写入读取python的全局变量”，”将c++类与函数以module形式提供给python”这3个功能就足以实现一个脚本引擎。</p>
<a id="more"></a>
<h3 id="脚本引擎架构设计"><a href="#脚本引擎架构设计" class="headerlink" title="脚本引擎架构设计"></a>脚本引擎架构设计</h3><ul>
<li>游戏加载时的init，每帧的update以及用户触摸点击事件touched。这三处可以执行对应的三个python文件，将控制权转交脚本。</li>
<li>c++应该专注实现图形相关的内容，提供的抽象全部基于图形，与游戏逻辑无关。python实现游戏逻辑，比如Unit是python中的纯逻辑对象，只不过创建它时存储了c++中包含骨骼动画的SkeletonUnit指针地址，和图形对象绑定了。</li>
<li>c++应该把图形相关的类、类函数、计算密集的函数导出，提供给python。python再浅包装一下c++暴露的原始接口，提供文档和默认参数，方便python开发、测试。</li>
</ul>
<h3 id="boost-python的细节"><a href="#boost-python的细节" class="headerlink" title="boost/python的细节"></a>boost/python的细节</h3><ul>
<li>并不是所有类都可以作为python对象的，很多类都delete掉了拷贝构造函数，这种类不能导出到python模块里，需要另写一个简单的代理类。</li>
<li>导出时随便def多少函数、变量，不影响类结构的完整导出。一个类如果所有成员变量类型都对python解释器已知，即使不导出任何方法也是可以作为python对象存储所有数据的。</li>
<li>def的所有函数在python看来都是不正常的，无参数默认值，无形参，所以最好在python里包装一下顺便写个文档。</li>
<li>所有c++对象转python对象都是根据指针进行一层deep copy，把指针所指的数据复制，但不会把对象里的指针层层复制。</li>
<li>想要把指针类型转化为python object，最好不用ptr()函数，而是用reinterpret_cast<int>。</int></li>
<li>win_sdk中定义了ssize_t，py_config.h里又define了一下，两者不统一，前者是long，后者是int，在windows下int和long等价，所以编译boost/python时要改python源码，只一处而已，问题不大。</li>
<li><p>cpp内嵌的python解释器不会正常识别import，简单的解决办法就是在所有python的import前面加上cpp可执行文件所在的上级目录名，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> cqscripts.core.gamelayer <span class="keyword">import</span> *</div></pre></td></tr></table></figure>
<p>此外，cpp脚本引擎即使import了其他python模块也不会将cpp中定义的全局变量导入其中，需要手动导入main里的全局变量：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> __main__ <span class="keyword">import</span> x</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="为何要使用脚本"><a href="#为何要使用脚本" class="headerlink" title="为何要使用脚本"></a>为何要使用脚本</h3><p>现代c++非常强大，连lambda支持都完爆python，黑科技无穷无尽，写起来其实相当方便，但仍有一些缺点：</p>
<ul>
<li>c++需要VS或XCode支持。其他环境，例如武装到牙齿的emacs对复杂的c++项目依旧无力，IDE的整合是必需的。VS现在做的非常好用，但是特别笨重，又慢又占内存。不像编辑器打开了就写，随时随地的碎片时间可以利用起来。</li>
<li>c++随便改几句，编译一下就要几分钟甚至半小时。这导致无论开发还是debug都极其痛苦。脚本语言支持的热更新不仅方便了玩家，也节约了开发者的时间。</li>
<li>c++的方便高效建立在合理使用基础之上，门槛很高。即使合理使用了，还是有”声明”的额外书写代价，所以总归比脚本语言慢一些。</li>
</ul>
<h3 id="Python语言作脚本的优缺点"><a href="#Python语言作脚本的优缺点" class="headerlink" title="Python语言作脚本的优缺点"></a>Python语言作脚本的优缺点</h3><p>优点：</p>
<ul>
<li>JS，Lua都没有完备的类，与c++的逻辑绑定需要额外抽象成本。</li>
<li>JS其实很好，然而V8不支持ios设备。Boost/python支持各平台。</li>
<li>Python可以很方便地序列化。</li>
<li>Python作为抽象工具比较方便，语法甜，轮子也多。</li>
<li>layout控制语法，看起来清爽。</li>
</ul>
<p>缺点：</p>
<ul>
<li>计算性能低：V8&gt;Lua&gt;Python。</li>
<li>layout控制语法的设计会导致歧义、无法压缩脚本、修改代码时的麻烦。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Boost/python是无缝桥接cpp与python的最好工具。只需“exec某些python文件”，“写入读取python的全局变量”，”将c++类与函数以module形式提供给python”这3个功能就足以实现一个脚本引擎。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="wjpjw.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
